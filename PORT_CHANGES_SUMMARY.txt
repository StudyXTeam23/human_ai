===============================================================
        🔧 端口配置已更新
===============================================================

✅ 已修改的端口:

前端端口: 3000 → 18200
后端端口: 8000 → 18201

===============================================================

📝 已更新的文件:

前端配置:
  ✅ web/frontend/package.json
     - "dev": "next dev -p 18200"
     - "start": "next start -p 18200"
  
  ✅ web/frontend/next.config.js
     - destination: 'http://localhost:18201/api/:path*'

后端配置:
  ✅ web/backend/app/main.py
     - port=18201
     - print 访问地址: http://localhost:18201
  
  ✅ web/backend/app/config.py
     - cors_origins: ["http://localhost:18200"]
  
  ✅ web/backend/run_debug.py
     - port=18201
     - print 访问地址: http://localhost:18201

启动脚本:
  ✅ start-backend.sh
     - uvicorn ... --port 18201

部署脚本:
  ✅ deploy-scripts/deploy-backend.sh
     - --bind 0.0.0.0:18201
  
  ✅ deploy-scripts/deploy-frontend.sh
     - pm2 start npm ... -- start -- -p 18200
  
  ✅ deploy-scripts/setup-nginx.sh
     - upstream backend_api { server 127.0.0.1:18201; }
     - upstream frontend_web { server 127.0.0.1:18200; }

===============================================================

🚀 启动方式:

开发环境 (本地):
-----------------------
# 方式 1: 使用启动脚本
bash start-backend.sh
# 前端在另一个终端
cd web/frontend && pnpm dev

# 方式 2: 直接运行
cd web/backend && python app/main.py
cd web/frontend && pnpm dev

# 方式 3: IDE 调试
python web/backend/run_debug.py

访问地址:
  前端: http://localhost:18200
  后端: http://localhost:18201
  API文档: http://localhost:18201/docs

生产环境 (Linux 服务器):
-----------------------
# 使用自动部署脚本
bash deploy-scripts/deploy-backend.sh
bash deploy-scripts/deploy-frontend.sh
bash deploy-scripts/setup-nginx.sh

服务管理:
  后端: sudo systemctl start ai-humanizer-api
  前端: pm2 start ai-humanizer-web
  Nginx: sudo systemctl restart nginx

===============================================================

🔍 端口检查:

检查端口是否被占用:
  lsof -i :18200  # 前端
  lsof -i :18201  # 后端

检查服务是否运行:
  # 前端
  curl http://localhost:18200
  
  # 后端
  curl http://localhost:18201/health
  # 应该返回: {"status":"healthy","version":"1.0.0"}

检查 Nginx 代理 (生产环境):
  # 查看 Nginx 配置
  sudo nginx -t
  
  # 查看端口监听
  sudo netstat -tulpn | grep -E '18200|18201'

===============================================================

⚠️  重要提醒:

1. 开发环境:
   - 前端和后端都使用新端口 (18200/18201)
   - 确保没有其他服务占用这些端口

2. 生产环境:
   - Nginx 监听 80/443 端口 (对外)
   - 后端内部监听 18201
   - 前端内部监听 18200
   - Nginx 反向代理到内部端口

3. CORS 配置:
   - 后端已更新 CORS 允许 http://localhost:18200
   - 生产环境需要在 .env 中配置实际域名

4. 前端 API 调用:
   - 开发环境: next.config.js 代理到 18201
   - 生产环境: 使用 NEXT_PUBLIC_API_URL 环境变量

===============================================================

🧪 测试步骤:

1. 启动后端
   cd web/backend
   source venv/bin/activate
   python app/main.py
   # 应该看到: 🔗 访问: http://localhost:18201

2. 测试后端 API
   curl http://localhost:18201/health
   # 预期输出: {"status":"healthy","version":"1.0.0"}

3. 启动前端
   cd web/frontend
   pnpm dev
   # 应该看到: ▲ Next.js 14.x.x
   #           - Local:        http://localhost:18200

4. 测试前端页面
   打开浏览器访问: http://localhost:18200
   # 应该能看到主页

5. 测试 API 代理
   在浏览器控制台检查网络请求
   # API 请求应该是 /api/v1/xxx (被代理到 18201)

===============================================================

📚 相关文档:

- 完整部署指南: DEPLOY_TO_LINUX.md
- 快速部署: QUICK_DEPLOY.txt
- 部署总结: DEPLOYMENT_SUMMARY.txt

===============================================================

✅ 配置更新完成!

现在可以使用新端口启动服务:
  前端: http://localhost:18200
  后端: http://localhost:18201

===============================================================
