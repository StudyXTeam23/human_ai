{
  "id": "snapshot_1761118892540_mv5ehgp5r",
  "approvalId": "approval_1761118892535_rblrg3ha1",
  "approvalTitle": "任务分解文档 (tasks.md) - AI 文本人性化重写系统",
  "version": 1,
  "timestamp": "2025-10-22T07:41:32.540Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# AI 文本人性化重写系统 - 任务分解\n\n## 任务状态说明\n- `[ ]` 待处理\n- `[-]` 进行中\n- `[x]` 已完成\n\n---\n\n## 第一阶段: 项目初始化与基础架构\n\n### - [ ] 任务 1.1: 初始化 Next.js 前端项目\n**文件**: \n- `web/frontend/package.json`\n- `web/frontend/next.config.js`\n- `web/frontend/tsconfig.json`\n- `web/frontend/tailwind.config.ts`\n\n**需求引用**: NFR-3.5.1, NFR-3.5.2\n\n**描述**: \n创建 Next.js 14 项目,配置 TypeScript、TailwindCSS、ESLint、Prettier\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位资深的 Next.js 全栈工程师,精通 TypeScript 和现代前端工程化。\n\n**任务**: 初始化 Next.js 14 前端项目,配置完整的开发环境\n\n**上下文**: \n- 项目位于 /Users/yuyuan/studyx_human/web/frontend/\n- 使用 Next.js 14 App Router\n- 需要配置 TypeScript、TailwindCSS、ESLint、Prettier\n\n**步骤**:\n1. 在任务开始前,编辑 .spec-workflow/specs/ai-text-humanizer/tasks.md,将任务 1.1 的状态从 [ ] 改为 [-]\n2. 在 web/frontend/ 目录初始化 Next.js 14 项目\n3. 配置 package.json,包含所有必要依赖\n4. 配置 tsconfig.json (严格模式,无 any)\n5. 配置 tailwind.config.ts (使用设计文档中的颜色和字体)\n6. 配置 .eslintrc.json 和 .prettierrc\n7. 创建 app/layout.tsx 和 app/page.tsx 基础结构\n8. 创建 app/globals.css\n9. 验证项目可以正常构建 (pnpm build)\n10. 在任务完成后,编辑 tasks.md,将任务 1.1 的状态从 [-] 改为 [x]\n\n**约束**:\n- 使用 pnpm 作为包管理器\n- TypeScript 严格模式,不允许 any\n- 遵循 Next.js 14 App Router 最佳实践\n- 不要安装非必要的依赖\n\n**验收标准**:\n- ✅ pnpm build 成功\n- ✅ pnpm dev 可以启动开发服务器\n- ✅ TypeScript 无错误\n- ✅ ESLint 无错误\n- ✅ 页面可以正常访问 (http://localhost:3000)\n```\n\n---\n\n### - [ ] 任务 1.2: 集成 shadcn/ui 组件库\n**文件**:\n- `web/frontend/components/ui/*.tsx`\n- `web/frontend/lib/utils.ts`\n- `web/frontend/components.json`\n\n**需求引用**: NFR-3.5.1\n\n**描述**: \n安装和配置 shadcn/ui,初始化需要的基础 UI 组件\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React UI 组件的前端工程师。\n\n**任务**: 集成 shadcn/ui 组件库,安装所有需要的 UI 组件\n\n**上下文**:\n- 前端项目已初始化\n- 需要的组件: Button, Tabs, Select, Card, Textarea, Input, Tooltip, Progress, Dialog, Toast\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 1.2 的状态改为 [-]\n2. 初始化 shadcn/ui (npx shadcn-ui@latest init)\n3. 安装所有需要的组件:\n   - button\n   - tabs\n   - select\n   - card\n   - textarea\n   - input\n   - tooltip\n   - progress\n   - dialog\n   - toast (sonner)\n4. 创建 lib/utils.ts 工具函数\n5. 验证组件可以正常导入和使用\n6. 在任务完成后,编辑 tasks.md,将任务 1.2 的状态改为 [x]\n\n**约束**:\n- 使用 shadcn/ui 官方推荐的配置\n- 所有组件放在 components/ui/ 目录\n- 不修改组件源码,保持可更新性\n\n**验收标准**:\n- ✅ 所有组件安装成功\n- ✅ 可以正常导入和使用\n- ✅ TypeScript 无错误\n```\n\n---\n\n### - [ ] 任务 1.3: 初始化 FastAPI 后端项目\n**文件**:\n- `web/backend/requirements.txt`\n- `web/backend/app/main.py`\n- `web/backend/app/config.py`\n\n**需求引用**: NFR-3.5.1, NFR-3.5.2\n\n**描述**:\n创建 FastAPI 项目,配置 CORS、基础路由、健康检查\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位资深的 Python 后端工程师,精通 FastAPI。\n\n**任务**: 初始化 FastAPI 后端项目,配置基础架构\n\n**上下文**:\n- 项目位于 /Users/yuyuan/studyx_human/web/backend/\n- 需要配置 CORS 允许前端访问\n- 使用 Python 3.11+\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 1.3 的状态改为 [-]\n2. 创建项目目录结构\n3. 创建 requirements.txt,包含:\n   - fastapi>=0.104.0\n   - uvicorn[standard]>=0.24.0\n   - pydantic>=2.0.0\n   - python-multipart\n   - PyPDF2 或 pdfplumber\n   - python-docx\n   - python-pptx\n   - pytest\n   - httpx\n4. 创建 app/main.py,配置 FastAPI 应用\n5. 配置 CORS 中间件\n6. 创建 / 和 /health 端点\n7. 创建 app/config.py 配置文件\n8. 验证服务可以正常启动\n9. 在任务完成后,编辑 tasks.md,将任务 1.3 的状态改为 [x]\n\n**约束**:\n- 使用 Python 虚拟环境 (venv)\n- 遵循 FastAPI 最佳实践\n- 代码有类型提示\n\n**验收标准**:\n- ✅ uvicorn app.main:app --reload 可以启动\n- ✅ 访问 http://localhost:18201 返回正常\n- ✅ 访问 http://localhost:18201/docs 显示 API 文档\n- ✅ 访问 http://localhost:18201/health 返回健康状态\n```\n\n---\n\n## 第二阶段: 数据模型与验证\n\n### - [ ] 任务 2.1: 创建前端 Zod 验证模式\n**文件**:\n- `web/frontend/schemas/humanize.ts`\n- `web/frontend/types/index.ts`\n\n**需求引用**: FR-2.5.1\n\n**描述**:\n定义表单验证模式和 TypeScript 类型\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 TypeScript 和数据验证的前端工程师。\n\n**任务**: 创建 Zod 验证模式和 TypeScript 类型定义\n\n**上下文**:\n- 需要验证文本输入(300-5000 字符)\n- 需要验证文档上传\n- 需要验证参数选择\n- 参考设计文档 2.3.1 节\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 2.1 的状态改为 [-]\n2. 创建 schemas/humanize.ts\n3. 定义 humanizeSchema (参考设计文档)\n4. 定义所有相关的 TypeScript 类型\n5. 导出 HumanizeFormData 类型\n6. 创建 types/index.ts,汇总所有类型\n7. 编写单元测试验证 schema\n8. 在任务完成后,编辑 tasks.md,将任务 2.1 的状态改为 [x]\n\n**_Leverage**:\n- 参考 design.md 第 2.3.1 节的 schema 定义\n\n**_Requirements**:\n- FR-2.5.1: 输入验证\n\n**约束**:\n- 所有验证规则必须与需求文档一致\n- 提供清晰的错误信息\n- 支持中文错误消息\n\n**验收标准**:\n- ✅ Schema 验证逻辑正确\n- ✅ 类型定义完整\n- ✅ 单元测试通过\n```\n\n---\n\n### - [ ] 任务 2.2: 创建后端 Pydantic 模型\n**文件**:\n- `web/backend/app/models/schemas.py`\n\n**需求引用**: FR-2.5.1\n\n**描述**:\n定义 API 请求/响应模型\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 Pydantic 和 FastAPI 的后端工程师。\n\n**任务**: 创建 Pydantic 数据模型\n\n**上下文**:\n- 定义 API 的请求和响应结构\n- 使用 Pydantic v2\n- 参考设计文档 3.2 节\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 2.2 的状态改为 [-]\n2. 创建 app/models/schemas.py\n3. 定义所有 Enum 类型 (InputMode, Length, Similarity, Style)\n4. 定义 Source 模型\n5. 定义 Params 模型 (含验证器)\n6. 定义 HumanizeRequest 模型\n7. 定义 HumanizeResponse 模型\n8. 编写单元测试\n9. 在任务完成后,编辑 tasks.md,将任务 2.2 的状态改为 [x]\n\n**_Leverage**:\n- 参考 design.md 第 3.2.1 节的模型定义\n\n**_Requirements**:\n- FR-2.5.1: 输入验证\n\n**约束**:\n- 使用 Pydantic v2 语法\n- 添加适当的验证器\n- 提供示例值 (用于 API 文档)\n\n**验收标准**:\n- ✅ 模型定义完整\n- ✅ 验证逻辑正确\n- ✅ API 文档自动生成\n```\n\n---\n\n## 第三阶段: 输入管理\n\n### - [ ] 任务 3.1: 实现字符计数 Hook\n**文件**:\n- `web/frontend/hooks/useCharCount.ts`\n\n**需求引用**: FR-2.1.3\n\n**描述**:\n创建字符计数自定义 Hook\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React Hooks 的前端工程师。\n\n**任务**: 实现字符计数自定义 Hook\n\n**上下文**:\n- 需要使用 TextEncoder 统计字符数\n- 支持多语言字符\n- 返回验证状态\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 3.1 的状态改为 [-]\n2. 创建 hooks/useCharCount.ts\n3. 实现字符计数逻辑 (使用 TextEncoder)\n4. 返回 count, isValid, isTooShort, isTooLong\n5. 使用 useMemo 优化性能\n6. 编写单元测试\n7. 在任务完成后,编辑 tasks.md,将任务 3.1 的状态改为 [x]\n\n**_Leverage**:\n- 参考 design.md 第 2.3.3 节\n\n**_Requirements**:\n- FR-2.1.3: 字符统计\n\n**约束**:\n- 必须使用 TextEncoder().encode(text).length\n- 优化性能,避免不必要的计算\n\n**验收标准**:\n- ✅ 字符计数准确\n- ✅ 支持多语言(中文、emoji)\n- ✅ 性能良好\n```\n\n---\n\n### - [ ] 任务 3.2: 实现文档上传组件\n**文件**:\n- `web/frontend/components/UploadDropzone.tsx`\n\n**需求引用**: FR-2.1.2\n\n**描述**:\n创建支持拖拽的文档上传组件\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React 和文件处理的前端工程师。\n\n**任务**: 实现文档上传组件 (拖拽 + 点击)\n\n**上下文**:\n- 支持 PDF/PPT/DOCX/TXT\n- 最大 40MB\n- 拖拽和点击上传\n- 显示文件信息\n- 错误提示\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 3.2 的状态改为 [-]\n2. 创建 components/UploadDropzone.tsx\n3. 实现拖拽事件处理 (onDragOver, onDrop)\n4. 实现点击上传 (input file)\n5. 文件验证 (格式、大小)\n6. 显示文件信息 (名称、大小、图标)\n7. 添加移除按钮\n8. 错误状态显示\n9. 添加无障碍属性\n10. 在任务完成后,编辑 tasks.md,将任务 3.2 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Card 组件\n- 使用 lucide-react 图标\n- 参考现有设计 HTML\n\n**_Requirements**:\n- FR-2.1.2: 文档上传\n\n**约束**:\n- 必须验证文件格式和大小\n- 提供清晰的用户反馈\n- 支持键盘操作\n\n**验收标准**:\n- ✅ 拖拽上传正常\n- ✅ 点击上传正常\n- ✅ 文件验证准确\n- ✅ 错误提示友好\n- ✅ 无障碍性符合标准\n```\n\n---\n\n### - [ ] 任务 3.3: 实现文本输入区域\n**文件**:\n- `web/frontend/components/InputSection.tsx`\n\n**需求引用**: FR-2.1.1, FR-2.1.3\n\n**描述**:\n创建文本输入组件,集成 Tabs 切换\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React Hook Form 的前端工程师。\n\n**任务**: 实现输入区域组件 (Text/Document 切换)\n\n**上下文**:\n- 使用 Tabs 切换输入模式\n- 文本模式: Textarea + 字符计数\n- 文档模式: UploadDropzone\n- 集成 React Hook Form\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 3.3 的状态改为 [-]\n2. 创建 components/InputSection.tsx\n3. 使用 shadcn/ui Tabs 组件\n4. 集成 React Hook Form\n5. 文本 Tab: Textarea + useCharCount\n6. 文档 Tab: UploadDropzone\n7. 错误状态显示\n8. 实时验证\n9. 在任务完成后,编辑 tasks.md,将任务 3.3 的状态改为 [x]\n\n**_Leverage**:\n- 使用 components/UploadDropzone.tsx\n- 使用 hooks/useCharCount.ts\n- 使用 shadcn/ui Tabs, Textarea\n\n**_Requirements**:\n- FR-2.1.1: 文本输入\n- FR-2.1.3: 字符统计\n\n**约束**:\n- 必须使用 React Hook Form Controller\n- 验证规则使用 Zod schema\n- 支持受控组件\n\n**验收标准**:\n- ✅ Tabs 切换正常\n- ✅ 表单验证正确\n- ✅ 字符计数实时更新\n- ✅ 错误提示清晰\n```\n\n---\n\n## 第四阶段: 参数控制\n\n### - [ ] 任务 4.1: 实现参数控制栏组件\n**文件**:\n- `web/frontend/components/ParamBar.tsx`\n\n**需求引用**: FR-2.2.1, FR-2.2.2, FR-2.2.3\n\n**描述**:\n创建参数选择组件 (Length, Similarity, Style)\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通表单设计的前端工程师。\n\n**任务**: 实现参数控制栏 (三个下拉选择 + 自定义输入)\n\n**上下文**:\n- 三个参数: Length, Similarity, Style\n- Style=Custom 时显示额外输入框\n- 移动端折叠为 Drawer\n- 集成 React Hook Form\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 4.1 的状态改为 [-]\n2. 创建 components/ParamBar.tsx\n3. 实现三个 Select 组件\n4. Style 变化时显示/隐藏自定义输入\n5. 移动端使用 Drawer 展示\n6. 集成 React Hook Form\n7. 添加 Tooltip 说明\n8. 响应式布局\n9. 在任务完成后,编辑 tasks.md,将任务 4.1 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Select, Input, Drawer, Tooltip\n- 使用 React Hook Form Controller\n\n**_Requirements**:\n- FR-2.2.1: 长度参数\n- FR-2.2.2: 相似度参数\n- FR-2.2.3: 风格参数\n\n**约束**:\n- 移动端 (<768px) 使用 Drawer\n- 桌面端横向排列\n- 所有选项必须与需求一致\n\n**验收标准**:\n- ✅ 三个下拉正常工作\n- ✅ Custom 输入框条件显示\n- ✅ 移动端 Drawer 正常\n- ✅ 表单集成正确\n```\n\n---\n\n## 第五阶段: 后端服务\n\n### - [ ] 任务 5.1: 实现文本处理服务\n**文件**:\n- `web/backend/app/services/text_processor.py`\n\n**需求引用**: FR-2.3.1\n\n**描述**:\n创建模拟文本人性化处理服务\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 Python 和文本处理的后端工程师。\n\n**任务**: 实现文本处理服务 (模拟 AI 转换)\n\n**上下文**:\n- 模拟延迟 800-1200ms\n- 根据参数进行简单的文本转换\n- 不调用真实 AI 模型\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 5.1 的状态改为 [-]\n2. 创建 app/services/text_processor.py\n3. 实现 TextProcessorService 类\n4. 实现 humanize 方法 (模拟延迟)\n5. 实现 _mock_transform 方法\n6. 根据 length 参数调整文本长度\n7. 根据 style 参数调整文本风格\n8. 编写单元测试\n9. 在任务完成后,编辑 tasks.md,将任务 5.1 的状态改为 [x]\n\n**_Leverage**:\n- 参考 design.md 第 3.3.1 节\n\n**_Requirements**:\n- FR-2.3.1: 人性化处理\n\n**约束**:\n- 必须模拟 800-1200ms 延迟\n- 转换逻辑简单但有区分度\n- 代码可扩展,便于未来集成真实模型\n\n**验收标准**:\n- ✅ 延迟时间符合要求\n- ✅ 不同参数返回不同结果\n- ✅ 单元测试通过\n```\n\n---\n\n### - [ ] 任务 5.2: 实现文档解析服务\n**文件**:\n- `web/backend/app/services/document_parser.py`\n\n**需求引用**: FR-2.1.2\n\n**描述**:\n创建文档解析服务 (PDF/DOCX/PPT/TXT)\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通文档处理的 Python 工程师。\n\n**任务**: 实现文档解析服务\n\n**上下文**:\n- 支持 PDF, DOCX, PPTX, TXT\n- 提取纯文本内容\n- 处理异常情况\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 5.2 的状态改为 [-]\n2. 创建 app/services/document_parser.py\n3. 实现 DocumentParserService 类\n4. 实现 parse_pdf 方法\n5. 实现 parse_docx 方法\n6. 实现 parse_pptx 方法\n7. 实现 parse_txt 方法\n8. 实现 parse 统一入口方法\n9. 添加错误处理\n10. 编写单元测试\n11. 在任务完成后,编辑 tasks.md,将任务 5.2 的状态改为 [x]\n\n**_Leverage**:\n- 使用 PyPDF2/pdfplumber\n- 使用 python-docx\n- 使用 python-pptx\n- 参考 design.md 第 3.3.2 节\n\n**_Requirements**:\n- FR-2.1.2: 文档上传\n\n**约束**:\n- 处理编码问题\n- 限制解析时间\n- 优雅处理错误\n\n**验收标准**:\n- ✅ 所有格式都能正确解析\n- ✅ 错误处理完善\n- ✅ 单元测试通过\n```\n\n---\n\n### - [ ] 任务 5.3: 实现人性化 API 路由\n**文件**:\n- `web/backend/app/api/humanize.py`\n\n**需求引用**: FR-2.3.1\n\n**描述**:\n创建 FastAPI 路由,连接服务层\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 FastAPI 的后端工程师。\n\n**任务**: 实现人性化处理 API 端点\n\n**上下文**:\n- POST /api/v1/humanize\n- 接收 HumanizeRequest\n- 返回 HumanizeResponse\n- 调用 TextProcessorService\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 5.3 的状态改为 [-]\n2. 创建 app/api/humanize.py\n3. 创建 APIRouter\n4. 实现 /humanize 端点\n5. 集成 TextProcessorService\n6. 添加错误处理\n7. 添加日志记录\n8. 在 main.py 中注册路由\n9. 编写 API 测试\n10. 在任务完成后,编辑 tasks.md,将任务 5.3 的状态改为 [x]\n\n**_Leverage**:\n- 使用 app/services/text_processor.py\n- 使用 app/models/schemas.py\n- 参考 design.md 第 3.4 节\n\n**_Requirements**:\n- FR-2.3.1: 人性化处理\n\n**约束**:\n- 使用 Pydantic 模型验证\n- 返回标准 HTTP 状态码\n- 提供清晰的错误信息\n\n**验收标准**:\n- ✅ API 端点正常工作\n- ✅ 请求验证正确\n- ✅ 错误处理完善\n- ✅ API 文档生成正确\n```\n\n---\n\n## 第六阶段: 前端 API 集成\n\n### - [ ] 任务 6.1: 实现 API 调用层\n**文件**:\n- `web/frontend/lib/api.ts`\n\n**需求引用**: FR-2.3.1\n\n**描述**:\n创建前端 API 调用工具函数\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通前端 API 集成的工程师。\n\n**任务**: 实现 API 调用层\n\n**上下文**:\n- 调用后端 /api/v1/humanize\n- 类型安全\n- 错误处理\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 6.1 的状态改为 [-]\n2. 创建 lib/api.ts\n3. 定义 HumanizeRequest 和 HumanizeResponse 接口\n4. 实现 humanizeText 函数\n5. 添加错误处理\n6. 添加请求超时\n7. 编写单元测试\n8. 在任务完成后,编辑 tasks.md,将任务 6.1 的状态改为 [x]\n\n**_Leverage**:\n- 使用 types/index.ts\n- 参考 design.md 第 2.3.2 节\n\n**_Requirements**:\n- FR-2.3.1: 人性化处理\n\n**约束**:\n- 必须类型安全\n- 处理网络错误\n- 支持取消请求\n\n**验收标准**:\n- ✅ API 调用正常\n- ✅ 类型定义准确\n- ✅ 错误处理完善\n```\n\n---\n\n### - [ ] 任务 6.2: 实现 useHumanize Hook\n**文件**:\n- `web/frontend/hooks/useHumanize.ts`\n\n**需求引用**: FR-2.3.1\n\n**描述**:\n创建人性化处理自定义 Hook\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React Hooks 和状态管理的前端工程师。\n\n**任务**: 实现 useHumanize Hook\n\n**上下文**:\n- 处理表单提交\n- 管理加载状态\n- 处理文档解析\n- 错误提示\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 6.2 的状态改为 [-]\n2. 创建 hooks/useHumanize.ts\n3. 管理 isLoading, error, result 状态\n4. 实现 mutate 函数\n5. 处理文档解析 (FileReader)\n6. 调用 API\n7. 集成 toast 提示\n8. 编写单元测试\n9. 在任务完成后,编辑 tasks.md,将任务 6.2 的状态改为 [x]\n\n**_Leverage**:\n- 使用 lib/api.ts\n- 使用 shadcn/ui toast\n- 参考 design.md 第 2.3.3 节\n\n**_Requirements**:\n- FR-2.3.1: 人性化处理\n\n**约束**:\n- 文档内容超过 5000 字符自动截断\n- 显示友好的错误提示\n- 清理副作用\n\n**验收标准**:\n- ✅ 状态管理正确\n- ✅ 文档解析成功\n- ✅ 错误提示友好\n- ✅ 无内存泄漏\n```\n\n---\n\n## 第七阶段: 输出与交互\n\n### - [ ] 任务 7.1: 实现输出面板组件\n**文件**:\n- `web/frontend/components/OutputPanel.tsx`\n\n**需求引用**: FR-2.3.2, FR-2.3.3, FR-2.3.4, FR-2.3.5\n\n**描述**:\n创建输出面板,显示结果和操作按钮\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React 和用户体验的前端工程师。\n\n**任务**: 实现输出面板组件\n\n**上下文**:\n- 显示重写结果\n- 提供复制、下载、重新生成功能\n- 加载状态 (skeleton)\n- 错误状态\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 7.1 的状态改为 [-]\n2. 创建 components/OutputPanel.tsx\n3. 使用 Card 布局\n4. 显示结果文本 (可滚动)\n5. 显示字符数\n6. 实现复制按钮 (使用 Clipboard API)\n7. 实现下载按钮 (生成 .txt 文件)\n8. 实现重新生成按钮\n9. 加载状态显示 skeleton\n10. 错误状态显示提示\n11. 在任务完成后,编辑 tasks.md,将任务 7.1 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Card, Button\n- 使用 lucide-react 图标\n\n**_Requirements**:\n- FR-2.3.2: 结果展示\n- FR-2.3.3: 复制功能\n- FR-2.3.4: 下载功能\n- FR-2.3.5: 重新生成功能\n\n**约束**:\n- 文件名格式: humanized_text_YYYYMMDD_HHMMSS.txt\n- 复制成功显示 toast\n- 支持键盘快捷键 (Ctrl+C)\n\n**验收标准**:\n- ✅ 结果显示正常\n- ✅ 复制功能正常\n- ✅ 下载功能正常\n- ✅ 重新生成正常\n- ✅ 加载状态清晰\n```\n\n---\n\n### - [ ] 任务 7.2: 实现微调器组件\n**文件**:\n- `web/frontend/components/FineTuner.tsx`\n\n**需求引用**: FR-2.3.2\n\n**描述**:\n创建微调器,前端调整输出参数\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通交互设计的前端工程师。\n\n**任务**: 实现微调器组件 (仅前端模拟)\n\n**上下文**:\n- 语气滑块: Formal ↔ Casual\n- 句长滑块: Short ↔ Long\n- 复杂度滑块: Simple ↔ Complex\n- 调整后实时更新显示\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 7.2 的状态改为 [-]\n2. 创建 components/FineTuner.tsx\n3. 使用 Card 布局\n4. 实现三个滑块 (使用 Slider)\n5. 滑块变化时触发回调\n6. 前端模拟文本调整效果\n7. 显示当前参数值\n8. 在任务完成后,编辑 tasks.md,将任务 7.2 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Card, Slider\n\n**_Requirements**:\n- FR-2.3.2: 结果展示\n\n**约束**:\n- 仅前端模拟,不调用 API\n- 调整效果明显但简单\n- 实时响应\n\n**验收标准**:\n- ✅ 滑块交互正常\n- ✅ 参数值显示正确\n- ✅ 视觉效果友好\n```\n\n---\n\n### - [ ] 任务 7.3: 实现清空功能\n**文件**:\n- `web/frontend/components/ActionButtons.tsx`\n\n**需求引用**: FR-2.3.6\n\n**描述**:\n创建操作按钮组 (Humanize + Clear)\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通表单处理的前端工程师。\n\n**任务**: 实现操作按钮组\n\n**上下文**:\n- Humanize 按钮 (主按钮)\n- Clear 按钮 (次按钮)\n- 按钮状态管理\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 7.3 的状态改为 [-]\n2. 创建 components/ActionButtons.tsx\n3. 实现 Humanize 按钮\n4. 实现 Clear 按钮\n5. 验证失败时禁用 Humanize\n6. 加载时显示 spinner\n7. Clear 重置所有状态\n8. 添加键盘支持 (Enter 提交)\n9. 在任务完成后,编辑 tasks.md,将任务 7.3 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Button\n- 使用 React Hook Form\n\n**_Requirements**:\n- FR-2.3.6: 清空功能\n\n**约束**:\n- Clear 需要确认对话框 (如果有内容)\n- 按钮状态反映表单状态\n- 提供视觉反馈\n\n**验收标准**:\n- ✅ 按钮状态正确\n- ✅ Clear 功能正常\n- ✅ 键盘支持完善\n```\n\n---\n\n## 第八阶段: 历史记录\n\n### - [ ] 任务 8.1: 实现 LocalStorage 管理\n**文件**:\n- `web/frontend/lib/storage.ts`\n\n**需求引用**: FR-2.4.1\n\n**描述**:\n创建 LocalStorage 工具函数\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通浏览器 API 的前端工程师。\n\n**任务**: 实现 LocalStorage 管理工具\n\n**上下文**:\n- 保存历史记录 (最多 3 条)\n- 类型安全\n- 错误处理\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 8.1 的状态改为 [-]\n2. 创建 lib/storage.ts\n3. 定义 HistoryItem 类型\n4. 实现 getHistory 函数\n5. 实现 saveHistory 函数\n6. 实现 addHistoryItem 函数 (保持最多 3 条)\n7. 实现 clearHistory 函数\n8. 添加错误处理\n9. 编写单元测试\n10. 在任务完成后,编辑 tasks.md,将任务 8.1 的状态改为 [x]\n\n**_Leverage**:\n- 使用 types/index.ts\n\n**_Requirements**:\n- FR-2.4.1: 历史记录显示\n\n**约束**:\n- 处理 JSON 解析错误\n- 处理 quota 超限\n- 数据结构版本控制\n\n**验收标准**:\n- ✅ 读写功能正常\n- ✅ 最多保存 3 条\n- ✅ 错误处理完善\n```\n\n---\n\n### - [ ] 任务 8.2: 实现 useHistory Hook\n**文件**:\n- `web/frontend/hooks/useHistory.ts`\n\n**需求引用**: FR-2.4.1, FR-2.4.2\n\n**描述**:\n创建历史记录管理 Hook\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React 状态管理的前端工程师。\n\n**任务**: 实现历史记录 Hook\n\n**上下文**:\n- 加载历史记录\n- 添加新记录\n- 回填记录\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 8.2 的状态改为 [-]\n2. 创建 hooks/useHistory.ts\n3. 管理 history 状态\n4. 实现 addToHistory 函数\n5. 实现 loadHistory 函数\n6. 同步 LocalStorage\n7. 编写单元测试\n8. 在任务完成后,编辑 tasks.md,将任务 8.2 的状态改为 [x]\n\n**_Leverage**:\n- 使用 lib/storage.ts\n- 参考 design.md 第 2.3.3 节\n\n**_Requirements**:\n- FR-2.4.1: 历史记录显示\n- FR-2.4.2: 历史记录回填\n\n**约束**:\n- 组件卸载时清理\n- 防止重复添加\n- 性能优化\n\n**验收标准**:\n- ✅ 历史记录同步正确\n- ✅ 添加功能正常\n- ✅ 无内存泄漏\n```\n\n---\n\n### - [ ] 任务 8.3: 实现历史记录组件\n**文件**:\n- `web/frontend/components/HistoryRail.tsx`\n\n**需求引用**: FR-2.4.1, FR-2.4.2\n\n**描述**:\n创建历史记录显示组件\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 UI 组件的前端工程师。\n\n**任务**: 实现历史记录组件\n\n**上下文**:\n- 显示最近 3 条\n- 点击回填\n- 卡片布局\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 8.3 的状态改为 [-]\n2. 创建 components/HistoryRail.tsx\n3. 使用 Card 布局\n4. 显示预览文本 (前 100 字)\n5. 显示参数摘要\n6. 显示时间戳 (格式化)\n7. 点击回填功能\n8. 空状态显示\n9. 响应式布局\n10. 在任务完成后,编辑 tasks.md,将任务 8.3 的状态改为 [x]\n\n**_Leverage**:\n- 使用 shadcn/ui Card\n- 使用 hooks/useHistory.ts\n\n**_Requirements**:\n- FR-2.4.1: 历史记录显示\n- FR-2.4.2: 历史记录回填\n\n**约束**:\n- 时间格式: MM/DD/YYYY\n- 预览最多 100 字\n- 移动端单栏,桌面端三栏\n\n**验收标准**:\n- ✅ 历史记录显示正确\n- ✅ 点击回填正常\n- ✅ 响应式布局正常\n- ✅ 空状态友好\n```\n\n---\n\n## 第九阶段: 页面组装\n\n### - [ ] 任务 9.1: 实现主页组件\n**文件**:\n- `web/frontend/app/page.tsx`\n\n**需求引用**: 所有功能需求\n\n**描述**:\n组装所有组件,实现完整页面\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 Next.js 和页面架构的全栈工程师。\n\n**任务**: 组装主页,集成所有组件\n\n**上下文**:\n- 集成所有已完成的组件\n- 管理全局状态\n- 实现完整交互流程\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 9.1 的状态改为 [-]\n2. 编辑 app/page.tsx\n3. 引入所有组件\n4. 使用 React Hook Form 管理表单\n5. 集成 useHumanize Hook\n6. 集成 useHistory Hook\n7. 实现组件间数据流\n8. 添加页面标题和副标题\n9. 添加免责声明 Tooltip\n10. 测试完整流程\n11. 在任务完成后,编辑 tasks.md,将任务 9.1 的状态改为 [x]\n\n**_Leverage**:\n- 所有已完成的组件\n- 所有已完成的 Hooks\n- schemas/humanize.ts\n\n**_Requirements**:\n- 所有功能需求\n\n**约束**:\n- 遵循需求文档的 UI 结构\n- 保持组件解耦\n- 优化性能\n\n**验收标准**:\n- ✅ 所有组件正常显示\n- ✅ 完整流程可用\n- ✅ 无控制台错误\n- ✅ 性能良好\n```\n\n---\n\n### - [ ] 任务 9.2: 实现页面布局和样式\n**文件**:\n- `web/frontend/app/layout.tsx`\n- `web/frontend/app/globals.css`\n\n**需求引用**: NFR-3.2.2\n\n**描述**:\n配置页面布局、全局样式、字体\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 CSS 和布局设计的前端工程师。\n\n**任务**: 实现页面布局和全局样式\n\n**上下文**:\n- 配置 Inter 字体\n- 设置全局样式\n- 响应式布局\n- 深色模式支持 (可选)\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 9.2 的状态改为 [-]\n2. 编辑 app/layout.tsx\n3. 配置 Inter 字体 (next/font/google)\n4. 添加 SEO 元信息\n5. 编辑 app/globals.css\n6. 添加全局样式\n7. 配置 Tailwind 基础层\n8. 测试不同屏幕尺寸\n9. 在任务完成后,编辑 tasks.md,将任务 9.2 的状态改为 [x]\n\n**_Leverage**:\n- Next.js Font Optimization\n- Tailwind CSS\n\n**_Requirements**:\n- NFR-3.2.2: 响应式设计\n\n**约束**:\n- 移动优先\n- 支持 dark mode (可选)\n- 符合 WCAG AA 对比度\n\n**验收标准**:\n- ✅ 字体加载正常\n- ✅ SEO 元信息完整\n- ✅ 响应式布局正常\n- ✅ 对比度符合标准\n```\n\n---\n\n### - [ ] 任务 9.3: 添加页脚组件\n**文件**:\n- `web/frontend/components/Footer.tsx`\n\n**需求引用**: 需求文档第 7 节\n\n**描述**:\n创建页脚,显示免责声明和链接\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 React 组件的前端工程师。\n\n**任务**: 实现页脚组件\n\n**上下文**:\n- 显示免责声明\n- 显示相关链接\n- 简洁设计\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 9.3 的状态改为 [-]\n2. 创建 components/Footer.tsx\n3. 显示免责声明文本\n4. 添加相关链接 (如有)\n5. 响应式布局\n6. 在 app/page.tsx 中引入\n7. 在任务完成后,编辑 tasks.md,将任务 9.3 的状态改为 [x]\n\n**_Requirements**:\n- 需求文档第 7 节: 免责声明\n\n**约束**:\n- 文本清晰易读\n- 链接在新窗口打开\n- 底部固定或内容下方\n\n**验收标准**:\n- ✅ 免责声明显示正确\n- ✅ 链接功能正常\n- ✅ 布局美观\n```\n\n---\n\n## 第十阶段: 测试与优化\n\n### - [ ] 任务 10.1: 编写前端单元测试\n**文件**:\n- `web/frontend/tests/unit/*.test.ts`\n- `web/frontend/vitest.config.ts`\n\n**需求引用**: NFR-3.5.1\n\n**描述**:\n为关键函数和组件编写单元测试\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通测试的前端工程师。\n\n**任务**: 编写单元测试\n\n**上下文**:\n- 测试 Zod schemas\n- 测试 Hooks\n- 测试工具函数\n- 使用 vitest\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 10.1 的状态改为 [-]\n2. 配置 vitest.config.ts\n3. 测试 schemas/humanize.ts\n4. 测试 hooks/useCharCount.ts\n5. 测试 lib/api.ts\n6. 测试 lib/storage.ts\n7. 确保覆盖率 > 70%\n8. 在任务完成后,编辑 tasks.md,将任务 10.1 的状态改为 [x]\n\n**_Leverage**:\n- vitest\n- @testing-library/react\n\n**_Requirements**:\n- NFR-3.5.1: 代码质量\n\n**约束**:\n- 关键路径必须测试\n- 边界情况必须覆盖\n- 测试可读性强\n\n**验收标准**:\n- ✅ pnpm test 通过\n- ✅ 覆盖率 > 70%\n- ✅ 测试用例清晰\n```\n\n---\n\n### - [ ] 任务 10.2: 编写后端测试\n**文件**:\n- `web/backend/tests/*.py`\n\n**需求引用**: NFR-3.5.1\n\n**描述**:\n为 API 和服务编写测试\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 Python 测试的后端工程师。\n\n**任务**: 编写后端测试\n\n**上下文**:\n- 测试 API 端点\n- 测试服务层\n- 使用 pytest\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 10.2 的状态改为 [-]\n2. 完善 tests/test_api.py\n3. 完善 tests/test_services.py\n4. 测试成功场景\n5. 测试失败场景\n6. 测试边界情况\n7. 确保覆盖率 > 80%\n8. 在任务完成后,编辑 tasks.md,将任务 10.2 的状态改为 [x]\n\n**_Leverage**:\n- pytest\n- FastAPI TestClient\n\n**_Requirements**:\n- NFR-3.5.1: 代码质量\n\n**约束**:\n- 使用 fixtures\n- 隔离测试\n- 快速执行\n\n**验收标准**:\n- ✅ pytest 通过\n- ✅ 覆盖率 > 80%\n- ✅ 测试独立可靠\n```\n\n---\n\n### - [ ] 任务 10.3: 响应式优化\n**文件**:\n- `web/frontend/components/*.tsx`\n\n**需求引用**: NFR-3.2.2\n\n**描述**:\n优化移动端和平板端体验\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通响应式设计的前端工程师。\n\n**任务**: 优化响应式布局\n\n**上下文**:\n- 移动端 < 768px\n- 平板端 768-1023px\n- 桌面端 ≥ 1024px\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 10.3 的状态改为 [-]\n2. 检查所有组件的响应式\n3. 参数栏移动端使用 Drawer\n4. 输出区移动端单栏\n5. 历史记录移动端单栏\n6. 调整字体大小和间距\n7. 测试不同设备\n8. 在任务完成后,编辑 tasks.md,将任务 10.3 的状态改为 [x]\n\n**_Requirements**:\n- NFR-3.2.2: 响应式设计\n\n**约束**:\n- 移动优先\n- 触摸友好\n- 性能优化\n\n**验收标准**:\n- ✅ 移动端布局正常\n- ✅ 平板端布局正常\n- ✅ 桌面端布局正常\n- ✅ 触摸操作流畅\n```\n\n---\n\n### - [ ] 任务 10.4: 无障碍性优化\n**文件**:\n- `web/frontend/components/*.tsx`\n\n**需求引用**: NFR-3.2.1\n\n**描述**:\n优化无障碍性,符合 WCAG AA 标准\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通无障碍性的前端工程师。\n\n**任务**: 优化无障碍性\n\n**上下文**:\n- 符合 WCAG AA 标准\n- 键盘导航\n- 屏幕阅读器支持\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 10.4 的状态改为 [-]\n2. 检查所有交互元素的 aria 属性\n3. 确保所有表单有 label\n4. 添加 role 属性\n5. 优化 Tab 顺序\n6. 添加焦点样式\n7. 使用 Lighthouse 检测\n8. 修复问题\n9. 在任务完成后,编辑 tasks.md,将任务 10.4 的状态改为 [x]\n\n**_Requirements**:\n- NFR-3.2.1: 无障碍性\n\n**约束**:\n- 对比度 ≥ 4.5:1\n- 所有功能键盘可达\n- 语义化 HTML\n\n**验收标准**:\n- ✅ Lighthouse 无障碍性 ≥ 90\n- ✅ 键盘导航完整\n- ✅ 屏幕阅读器友好\n```\n\n---\n\n### - [ ] 任务 10.5: 性能优化\n**文件**:\n- `web/frontend/**/*.tsx`\n- `web/frontend/next.config.js`\n\n**需求引用**: NFR-3.1.1\n\n**描述**:\n优化前端性能,提升加载和交互速度\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通性能优化的前端工程师。\n\n**任务**: 优化前端性能\n\n**上下文**:\n- 减少包体积\n- 优化渲染\n- 改善 Web Vitals\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 10.5 的状态改为 [-]\n2. 使用 React.memo 优化组件\n3. 使用 useMemo 和 useCallback\n4. 懒加载非关键组件\n5. 优化图片和字体\n6. 配置 next.config.js\n7. 使用 Lighthouse 测试\n8. 优化到目标指标\n9. 在任务完成后,编辑 tasks.md,将任务 10.5 的状态改为 [x]\n\n**_Requirements**:\n- NFR-3.1.1: 响应时间\n\n**约束**:\n- FCP < 1.8s\n- LCP < 2.5s\n- TTI < 3.8s\n\n**验收标准**:\n- ✅ Lighthouse Performance ≥ 90\n- ✅ 包体积合理\n- ✅ 交互响应快\n```\n\n---\n\n## 第十一阶段: 文档与部署\n\n### - [ ] 任务 11.1: 编写前端 README\n**文件**:\n- `web/frontend/README.md`\n\n**需求引用**: NFR-3.5.2\n\n**描述**:\n编写前端项目文档\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通技术写作的工程师。\n\n**任务**: 编写前端 README\n\n**上下文**:\n- 项目介绍\n- 安装步骤\n- 运行命令\n- 项目结构\n- 技术栈\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 11.1 的状态改为 [-]\n2. 创建 web/frontend/README.md\n3. 项目介绍\n4. 功能特性\n5. 技术栈\n6. 安装步骤\n7. 开发命令\n8. 项目结构\n9. 环境变量\n10. 部署指南\n11. 在任务完成后,编辑 tasks.md,将任务 11.1 的状态改为 [x]\n\n**_Requirements**:\n- NFR-3.5.2: 文档要求\n\n**约束**:\n- 清晰易懂\n- 包含示例\n- 保持更新\n\n**验收标准**:\n- ✅ 文档完整\n- ✅ 步骤清晰\n- ✅ 格式规范\n```\n\n---\n\n### - [ ] 任务 11.2: 编写后端 README\n**文件**:\n- `web/backend/README.md`\n\n**需求引用**: NFR-3.5.2\n\n**描述**:\n编写后端项目文档\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 API 文档的工程师。\n\n**任务**: 编写后端 README\n\n**上下文**:\n- API 文档\n- 安装步骤\n- 运行命令\n- 项目结构\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 11.2 的状态改为 [-]\n2. 创建 web/backend/README.md\n3. 项目介绍\n4. API 端点说明\n5. 数据模型\n6. 安装步骤\n7. 运行命令\n8. 测试命令\n9. 部署指南\n10. 在任务完成后,编辑 tasks.md,将任务 11.2 的状态改为 [x]\n\n**_Requirements**:\n- NFR-3.5.2: 文档要求\n\n**约束**:\n- API 文档详细\n- 包含请求示例\n- 错误码说明\n\n**验收标准**:\n- ✅ 文档完整\n- ✅ API 说明清晰\n- ✅ 示例准确\n```\n\n---\n\n### - [ ] 任务 11.3: 配置部署环境\n**文件**:\n- `web/frontend/.env.example`\n- `web/backend/.env.example`\n- `web/docker-compose.yml` (可选)\n\n**需求引用**: 设计文档第 9 节\n\n**描述**:\n配置生产环境部署\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位精通 DevOps 的全栈工程师。\n\n**任务**: 配置部署环境\n\n**上下文**:\n- 环境变量配置\n- Docker 配置 (可选)\n- 部署脚本\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 11.3 的状态改为 [-]\n2. 创建前端 .env.example\n3. 创建后端 .env.example\n4. (可选) 创建 Dockerfile\n5. (可选) 创建 docker-compose.yml\n6. 验证构建\n7. 编写部署文档\n8. 在任务完成后,编辑 tasks.md,将任务 11.3 的状态改为 [x]\n\n**_Leverage**:\n- 参考 design.md 第 9 节\n\n**约束**:\n- 敏感信息使用环境变量\n- 生产配置优化\n- 健康检查端点\n\n**验收标准**:\n- ✅ 环境变量配置完整\n- ✅ 构建成功\n- ✅ 部署文档清晰\n```\n\n---\n\n### - [ ] 任务 11.4: 最终验收测试\n**文件**:\n- 所有文件\n\n**需求引用**: 需求文档第 8 节 DoD\n\n**描述**:\n执行最终验收测试,确保所有需求满足\n\n**_Prompt**:\n```\n实现 spec ai-text-humanizer 的任务,首先运行 spec-workflow-guide 获取工作流指南,然后实现任务:\n\n**角色**: 你是一位资深的 QA 工程师。\n\n**任务**: 执行最终验收测试\n\n**上下文**:\n- 验证所有功能需求\n- 验证所有非功能需求\n- 验证 DoD 清单\n\n**步骤**:\n1. 在任务开始前,编辑 tasks.md,将任务 11.4 的状态改为 [-]\n2. 测试文本输入流程\n3. 测试文档上传流程\n4. 测试所有参数组合\n5. 测试输出功能 (复制/下载/重新生成)\n6. 测试历史记录\n7. 测试响应式布局\n8. 测试无障碍性\n9. 执行构建测试\n10. 执行单元测试\n11. 记录问题并修复\n12. 在任务完成后,编辑 tasks.md,将任务 11.4 的状态改为 [x]\n\n**_Requirements**:\n- 需求文档第 8 节: 验收标准\n\n**约束**:\n- 所有 DoD 项目必须通过\n- 关键路径无阻塞问题\n- 性能达标\n\n**验收标准**:\n- ✅ 所有功能正常\n- ✅ pnpm build 成功\n- ✅ pnpm test 成功\n- ✅ 无 ESLint 错误\n- ✅ 移动端正常\n- ✅ 无障碍性达标\n```\n\n---\n\n## 任务统计\n\n**总任务数**: 40 个任务\n\n**预计时间**:\n- 第一阶段 (初始化): 3 任务, ~4 小时\n- 第二阶段 (数据模型): 2 任务, ~2 小时\n- 第三阶段 (输入管理): 3 任务, ~6 小时\n- 第四阶段 (参数控制): 1 任务, ~3 小时\n- 第五阶段 (后端服务): 3 任务, ~6 小时\n- 第六阶段 (前端 API): 2 任务, ~4 小时\n- 第七阶段 (输出交互): 3 任务, ~6 小时\n- 第八阶段 (历史记录): 3 任务, ~4 小时\n- 第九阶段 (页面组装): 3 任务, ~4 小时\n- 第十阶段 (测试优化): 5 任务, ~8 小时\n- 第十一阶段 (文档部署): 4 任务, ~4 小时\n\n**总预计时间**: ~51 小时\n\n---\n\n**文档版本**: 1.0  \n**创建日期**: 2025-10-22  \n**最后更新**: 2025-10-22  \n**状态**: 待审核\n\n",
  "fileStats": {
    "size": 41055,
    "lines": 1775,
    "lastModified": "2025-10-22T07:41:18.223Z"
  },
  "comments": []
}