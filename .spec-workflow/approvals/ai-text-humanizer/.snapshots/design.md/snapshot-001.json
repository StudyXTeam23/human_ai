{
  "id": "snapshot_1761118646744_708bz0n75",
  "approvalId": "approval_1761118646706_mgnxnr7al",
  "approvalTitle": "技术设计文档 (design.md) - AI 文本人性化重写系统",
  "version": 1,
  "timestamp": "2025-10-22T07:37:26.744Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# AI 文本人性化重写系统 - 技术设计文档\n\n## 1. 系统架构\n\n### 1.1 整体架构\n本系统采用前后端分离的架构,前端使用 Next.js 14 (App Router) + React,后端使用 Python FastAPI。\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                        Client Side                          │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │           Next.js 14 App (App Router)                │  │\n│  │  ┌────────────┐  ┌────────────┐  ┌────────────┐    │  │\n│  │  │   Pages    │  │ Components │  │   Hooks    │    │  │\n│  │  └────────────┘  └────────────┘  └────────────┘    │  │\n│  │  ┌────────────┐  ┌────────────┐  ┌────────────┐    │  │\n│  │  │   Utils    │  │   Schemas  │  │   Types    │    │  │\n│  │  └────────────┘  └────────────┘  └────────────┘    │  │\n│  └──────────────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n                              │\n                              │ HTTP/REST API\n                              ▼\n┌─────────────────────────────────────────────────────────────┐\n│                        Server Side                          │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │              FastAPI Backend                         │  │\n│  │  ┌────────────┐  ┌────────────┐  ┌────────────┐    │  │\n│  │  │   Routes   │  │  Services  │  │   Models   │    │  │\n│  │  └────────────┘  └────────────┘  └────────────┘    │  │\n│  │  ┌────────────┐  ┌────────────┐                     │  │\n│  │  │   Utils    │  │ Validators │                     │  │\n│  │  └────────────┘  └────────────┘                     │  │\n│  └──────────────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n```\n\n### 1.2 技术栈选型\n\n#### 1.2.1 前端技术栈\n- **框架**: Next.js 14 (App Router)\n  - 理由: 提供 SSR、优秀的性能、内置路由系统\n- **语言**: TypeScript 5.x\n  - 理由: 类型安全、更好的开发体验\n- **样式**: TailwindCSS 3.x\n  - 理由: 快速开发、原子化 CSS、易于维护\n- **UI 组件**: shadcn/ui\n  - 理由: 基于 Radix UI,无障碍性好,可定制\n- **表单**: React Hook Form 7.x + Zod 3.x\n  - 理由: 性能优秀、声明式验证、TypeScript 友好\n- **图标**: lucide-react\n  - 理由: 现代化、可定制、树摇优化\n- **测试**: vitest + @testing-library/react\n  - 理由: 快速、与 Vite 集成良好\n\n#### 1.2.2 后端技术栈\n- **框架**: FastAPI 0.104+\n  - 理由: 高性能、自动 API 文档、类型提示\n- **语言**: Python 3.11+\n  - 理由: 丰富的生态、易于维护\n- **文档解析**: \n  - PDF: PyPDF2 / pdfplumber\n  - DOCX: python-docx\n  - PPT: python-pptx\n  - TXT: 内置\n- **验证**: Pydantic 2.x\n  - 理由: 与 FastAPI 无缝集成,数据验证强大\n- **CORS**: fastapi-cors\n  - 理由: 处理跨域请求\n\n### 1.3 项目结构\n\n```\n/Users/yuyuan/studyx_human/web/\n├── frontend/                      # Next.js 前端\n│   ├── app/                       # App Router 目录\n│   │   ├── layout.tsx            # 根布局\n│   │   ├── page.tsx              # 主页\n│   │   ├── api/                  # API 路由(可选,用于代理)\n│   │   │   └── humanize/\n│   │   │       └── route.ts      # 代理到后端 API\n│   │   └── globals.css           # 全局样式\n│   ├── components/               # React 组件\n│   │   ├── ui/                   # shadcn/ui 组件\n│   │   │   ├── button.tsx\n│   │   │   ├── tabs.tsx\n│   │   │   ├── select.tsx\n│   │   │   ├── card.tsx\n│   │   │   ├── textarea.tsx\n│   │   │   ├── input.tsx\n│   │   │   ├── tooltip.tsx\n│   │   │   ├── progress.tsx\n│   │   │   ├── dialog.tsx\n│   │   │   └── toast.tsx\n│   │   ├── UploadDropzone.tsx    # 文档上传组件\n│   │   ├── ParamBar.tsx          # 参数控制栏\n│   │   ├── OutputPanel.tsx       # 输出面板\n│   │   ├── FineTuner.tsx         # 微调器\n│   │   └── HistoryRail.tsx       # 历史记录\n│   ├── lib/                      # 工具函数\n│   │   ├── utils.ts              # 通用工具\n│   │   ├── api.ts                # API 调用\n│   │   └── storage.ts            # LocalStorage 管理\n│   ├── hooks/                    # 自定义 Hooks\n│   │   ├── useCharCount.ts       # 字符计数\n│   │   ├── useHistory.ts         # 历史记录管理\n│   │   └── useHumanize.ts        # 人性化处理\n│   ├── schemas/                  # Zod 验证模式\n│   │   └── humanize.ts           # 表单验证模式\n│   ├── types/                    # TypeScript 类型\n│   │   └── index.ts              # 类型定义\n│   ├── public/                   # 静态资源\n│   ├── tests/                    # 测试文件\n│   │   ├── unit/                 # 单元测试\n│   │   └── integration/          # 集成测试\n│   ├── .eslintrc.json            # ESLint 配置\n│   ├── .prettierrc               # Prettier 配置\n│   ├── tailwind.config.ts        # Tailwind 配置\n│   ├── tsconfig.json             # TypeScript 配置\n│   ├── next.config.js            # Next.js 配置\n│   ├── package.json              # 依赖管理\n│   ├── vitest.config.ts          # Vitest 配置\n│   └── README.md                 # 前端文档\n│\n└── backend/                       # FastAPI 后端\n    ├── app/                       # 应用主目录\n    │   ├── main.py               # FastAPI 应用入口\n    │   ├── api/                  # API 路由\n    │   │   ├── __init__.py\n    │   │   └── humanize.py       # 人性化 API\n    │   ├── services/             # 业务逻辑\n    │   │   ├── __init__.py\n    │   │   ├── text_processor.py # 文本处理服务\n    │   │   └── document_parser.py# 文档解析服务\n    │   ├── models/               # 数据模型\n    │   │   ├── __init__.py\n    │   │   └── schemas.py        # Pydantic 模型\n    │   ├── utils/                # 工具函数\n    │   │   ├── __init__.py\n    │   │   ├── validators.py     # 验证器\n    │   │   └── helpers.py        # 辅助函数\n    │   └── config.py             # 配置文件\n    ├── tests/                    # 测试文件\n    │   ├── __init__.py\n    │   ├── test_api.py           # API 测试\n    │   └── test_services.py      # 服务测试\n    ├── requirements.txt          # Python 依赖\n    ├── Dockerfile                # Docker 配置(可选)\n    └── README.md                 # 后端文档\n```\n\n## 2. 前端设计\n\n### 2.1 页面设计\n\n#### 2.1.1 主页 (`app/page.tsx`)\n```typescript\n// 主要功能:\n// 1. 整合所有组件\n// 2. 管理全局状态\n// 3. 协调组件交互\n\nexport default function HomePage() {\n  // 表单管理\n  const form = useForm<HumanizeFormData>({\n    resolver: zodResolver(humanizeSchema),\n    defaultValues: { /* ... */ }\n  });\n  \n  // 处理提交\n  const { mutate: humanize, isLoading } = useHumanize();\n  \n  // 历史记录\n  const { history, addToHistory } = useHistory();\n  \n  return (\n    <div>\n      <Header />\n      <InputSection form={form} />\n      <ParamBar form={form} />\n      <ActionButtons />\n      <OutputSection />\n      <HistoryRail history={history} />\n      <Footer />\n    </div>\n  );\n}\n```\n\n### 2.2 核心组件设计\n\n#### 2.2.1 UploadDropzone 组件\n```typescript\ninterface UploadDropzoneProps {\n  onFileSelect: (file: File) => void;\n  onFileRemove: () => void;\n  selectedFile?: File;\n  error?: string;\n}\n\n// 功能:\n// - 拖拽上传\n// - 点击上传\n// - 文件验证(格式、大小)\n// - 显示文件信息\n// - 移除文件\n```\n\n#### 2.2.2 ParamBar 组件\n```typescript\ninterface ParamBarProps {\n  form: UseFormReturn<HumanizeFormData>;\n}\n\n// 功能:\n// - 三个下拉选择器(Length, Similarity, Style)\n// - Style=Custom 时显示输入框\n// - 移动端折叠为 Drawer\n// - 参数验证\n```\n\n#### 2.2.3 OutputPanel 组件\n```typescript\ninterface OutputPanelProps {\n  content: string;\n  charCount: number;\n  isLoading: boolean;\n  onCopy: () => void;\n  onDownload: () => void;\n  onRegenerate: () => void;\n}\n\n// 功能:\n// - 显示重写结果\n// - 复制、下载、重新生成按钮\n// - 加载状态(skeleton)\n// - 字符数统计\n```\n\n#### 2.2.4 FineTuner 组件\n```typescript\ninterface FineTunerProps {\n  onAdjust: (params: FineTuneParams) => void;\n}\n\n// 功能:\n// - 语气滑块(Tone: Formal ↔ Casual)\n// - 句长滑块(Sentence Length: Short ↔ Long)\n// - 复杂度滑块(Complexity: Simple ↔ Complex)\n// - 实时预览调整效果(仅前端模拟)\n```\n\n#### 2.2.5 HistoryRail 组件\n```typescript\ninterface HistoryRailProps {\n  history: HistoryItem[];\n  onItemClick: (item: HistoryItem) => void;\n}\n\ninterface HistoryItem {\n  id: string;\n  preview: string;        // 前 100 字\n  timestamp: number;\n  params: {\n    length: string;\n    similarity: string;\n    style: string;\n  };\n}\n\n// 功能:\n// - 显示最近 3 条记录\n// - 点击回填\n// - 时间格式化\n```\n\n### 2.3 数据流设计\n\n#### 2.3.1 表单验证 Schema\n```typescript\n// schemas/humanize.ts\nimport { z } from 'zod';\n\nexport const humanizeSchema = z.object({\n  mode: z.enum(['text', 'document']),\n  text: z.string()\n    .max(5000, '最多支持 5000 个字符')\n    .refine(\n      (val) => val.length === 0 || val.length >= 300,\n      '最少需要 300 个字符'\n    ),\n  file: z.instanceof(File).optional(),\n  length: z.enum(['Normal', 'Concise', 'Expanded']),\n  similarity: z.enum(['Low', 'Moderate', 'High', 'Neutral']),\n  style: z.enum([\n    'Neutral', 'Academic', 'Business', 'Creative',\n    'Technical', 'Friendly', 'Informal', 'Reference', 'Custom'\n  ]),\n  customStyle: z.string().max(120).optional()\n}).refine(\n  (data) => {\n    if (data.mode === 'document') return !!data.file;\n    return data.text.length >= 300;\n  },\n  { message: '请提供至少 300 字符的文本或上传文件' }\n).refine(\n  (data) => {\n    if (data.style === 'Custom') return !!data.customStyle;\n    return true;\n  },\n  { message: '请提供自定义风格描述' }\n);\n\nexport type HumanizeFormData = z.infer<typeof humanizeSchema>;\n```\n\n#### 2.3.2 API 调用层\n```typescript\n// lib/api.ts\nexport interface HumanizeRequest {\n  source: {\n    mode: 'text' | 'document';\n    text: string;\n  };\n  params: {\n    length: string;\n    similarity: string;\n    style: string;\n    customStyle?: string;\n  };\n}\n\nexport interface HumanizeResponse {\n  content: string;\n  chars: number;\n}\n\nexport async function humanizeText(\n  request: HumanizeRequest\n): Promise<HumanizeResponse> {\n  const response = await fetch('/api/humanize', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(request)\n  });\n  \n  if (!response.ok) {\n    throw new Error('处理失败');\n  }\n  \n  return response.json();\n}\n```\n\n#### 2.3.3 自定义 Hooks\n\n**useCharCount Hook**\n```typescript\n// hooks/useCharCount.ts\nexport function useCharCount(text: string) {\n  const count = useMemo(() => {\n    return new TextEncoder().encode(text).length;\n  }, [text]);\n  \n  const isValid = count >= 300 && count <= 5000;\n  const isTooShort = count > 0 && count < 300;\n  const isTooLong = count > 5000;\n  \n  return { count, isValid, isTooShort, isTooLong };\n}\n```\n\n**useHistory Hook**\n```typescript\n// hooks/useHistory.ts\nexport function useHistory() {\n  const [history, setHistory] = useState<HistoryItem[]>([]);\n  \n  useEffect(() => {\n    // 从 LocalStorage 加载\n    const stored = localStorage.getItem('humanize_history');\n    if (stored) {\n      setHistory(JSON.parse(stored));\n    }\n  }, []);\n  \n  const addToHistory = (item: Omit<HistoryItem, 'id'>) => {\n    const newItem = { ...item, id: Date.now().toString() };\n    const newHistory = [newItem, ...history].slice(0, 3);\n    setHistory(newHistory);\n    localStorage.setItem('humanize_history', JSON.stringify(newHistory));\n  };\n  \n  return { history, addToHistory };\n}\n```\n\n**useHumanize Hook**\n```typescript\n// hooks/useHumanize.ts\nexport function useHumanize() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<HumanizeResponse | null>(null);\n  \n  const mutate = async (data: HumanizeFormData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // 处理文档\n      let text = data.text;\n      if (data.mode === 'document' && data.file) {\n        text = await parseDocument(data.file);\n        if (text.length > 5000) {\n          text = text.slice(0, 5000);\n          toast.warning('文档内容超过 5000 字符,已自动截断');\n        }\n      }\n      \n      // 调用 API\n      const response = await humanizeText({\n        source: { mode: data.mode, text },\n        params: {\n          length: data.length,\n          similarity: data.similarity,\n          style: data.style,\n          customStyle: data.customStyle\n        }\n      });\n      \n      setResult(response);\n      return response;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : '处理失败';\n      setError(message);\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return { mutate, isLoading, error, result };\n}\n```\n\n### 2.4 样式设计\n\n#### 2.4.1 Tailwind 配置\n```typescript\n// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './app/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: '#137fec',\n        'background-light': '#f6f7f8',\n        'background-dark': '#101922',\n      },\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n      },\n      borderRadius: {\n        DEFAULT: '0.25rem',\n        lg: '0.5rem',\n        xl: '0.75rem',\n      },\n    },\n  },\n  plugins: [require('@tailwindcss/forms')],\n};\n\nexport default config;\n```\n\n#### 2.4.2 响应式断点\n- **Mobile**: < 768px (单栏布局,参数条折叠)\n- **Tablet**: 768px - 1023px (优化间距)\n- **Desktop**: ≥ 1024px (双栏布局)\n\n### 2.5 无障碍性设计\n\n#### 2.5.1 语义化 HTML\n- 使用正确的 HTML5 标签 (`main`, `section`, `nav`, `button`)\n- 表单元素关联 `label`\n- 使用 `aria-label`、`aria-describedby` 等属性\n\n#### 2.5.2 键盘导航\n- Tab 键顺序逻辑\n- Enter 键提交表单\n- Escape 键关闭对话框\n- 焦点可见样式\n\n#### 2.5.3 屏幕阅读器支持\n- `role` 属性标记组件角色\n- `aria-live` 区域通知状态变化\n- 错误提示关联到表单字段\n\n## 3. 后端设计\n\n### 3.1 API 设计\n\n#### 3.1.1 人性化处理 API\n```python\n# API 端点: POST /api/v1/humanize\n\n# 请求体\n{\n  \"source\": {\n    \"mode\": \"text\",  # \"text\" | \"document\"\n    \"text\": \"The rain tapped gently...\"\n  },\n  \"params\": {\n    \"length\": \"Normal\",      # \"Normal\" | \"Concise\" | \"Expanded\"\n    \"similarity\": \"Moderate\", # \"Low\" | \"Moderate\" | \"High\" | \"Neutral\"\n    \"style\": \"Neutral\",      # ... | \"Custom\"\n    \"customStyle\": null      # 当 style=\"Custom\" 时必填\n  }\n}\n\n# 响应体(成功)\n{\n  \"content\": \"Rain gently tapped against...\",\n  \"chars\": 1234,\n  \"processingTime\": 850  # 毫秒\n}\n\n# 响应体(失败)\n{\n  \"detail\": \"Text length must be between 300 and 5000 characters\"\n}\n```\n\n### 3.2 数据模型\n\n#### 3.2.1 Pydantic 模型\n```python\n# models/schemas.py\nfrom pydantic import BaseModel, Field, validator\nfrom enum import Enum\nfrom typing import Optional\n\nclass InputMode(str, Enum):\n    TEXT = \"text\"\n    DOCUMENT = \"document\"\n\nclass Length(str, Enum):\n    NORMAL = \"Normal\"\n    CONCISE = \"Concise\"\n    EXPANDED = \"Expanded\"\n\nclass Similarity(str, Enum):\n    LOW = \"Low\"\n    MODERATE = \"Moderate\"\n    HIGH = \"High\"\n    NEUTRAL = \"Neutral\"\n\nclass Style(str, Enum):\n    NEUTRAL = \"Neutral\"\n    ACADEMIC = \"Academic\"\n    BUSINESS = \"Business\"\n    CREATIVE = \"Creative\"\n    TECHNICAL = \"Technical\"\n    FRIENDLY = \"Friendly\"\n    INFORMAL = \"Informal\"\n    REFERENCE = \"Reference\"\n    CUSTOM = \"Custom\"\n\nclass Source(BaseModel):\n    mode: InputMode\n    text: str = Field(..., min_length=300, max_length=5000)\n\nclass Params(BaseModel):\n    length: Length\n    similarity: Similarity\n    style: Style\n    customStyle: Optional[str] = Field(None, max_length=120)\n    \n    @validator('customStyle')\n    def validate_custom_style(cls, v, values):\n        if values.get('style') == Style.CUSTOM and not v:\n            raise ValueError('Custom style description is required')\n        return v\n\nclass HumanizeRequest(BaseModel):\n    source: Source\n    params: Params\n\nclass HumanizeResponse(BaseModel):\n    content: str\n    chars: int\n    processingTime: int\n```\n\n### 3.3 服务层设计\n\n#### 3.3.1 文本处理服务\n```python\n# services/text_processor.py\nimport random\nimport time\nfrom typing import Dict\n\nclass TextProcessorService:\n    \"\"\"模拟文本人性化处理服务\"\"\"\n    \n    def humanize(\n        self,\n        text: str,\n        length: str,\n        similarity: str,\n        style: str,\n        custom_style: str = None\n    ) -> Dict[str, any]:\n        \"\"\"\n        模拟人性化处理\n        在实际应用中,这里会调用真实的 AI 模型\n        \"\"\"\n        # 模拟处理延迟\n        delay = random.randint(800, 1200) / 1000\n        time.sleep(delay)\n        \n        # 模拟文本转换\n        processed_text = self._mock_transform(\n            text, length, similarity, style, custom_style\n        )\n        \n        return {\n            \"content\": processed_text,\n            \"chars\": len(processed_text.encode('utf-8')),\n            \"processingTime\": int(delay * 1000)\n        }\n    \n    def _mock_transform(\n        self,\n        text: str,\n        length: str,\n        similarity: str,\n        style: str,\n        custom_style: str\n    ) -> str:\n        \"\"\"模拟文本转换逻辑\"\"\"\n        # 这里实现简单的模拟转换\n        # 实际应用中会调用 AI 模型\n        \n        result = text\n        \n        # 根据长度调整\n        if length == \"Concise\":\n            result = self._shorten_text(result)\n        elif length == \"Expanded\":\n            result = self._expand_text(result)\n        \n        # 根据风格调整\n        if style == \"Academic\":\n            result = self._apply_academic_style(result)\n        elif style == \"Casual\":\n            result = self._apply_casual_style(result)\n        # ... 其他风格\n        \n        return result\n    \n    def _shorten_text(self, text: str) -> str:\n        \"\"\"缩短文本(模拟)\"\"\"\n        sentences = text.split('. ')\n        return '. '.join(sentences[:max(1, len(sentences) // 2)]) + '.'\n    \n    def _expand_text(self, text: str) -> str:\n        \"\"\"扩展文本(模拟)\"\"\"\n        expansions = [\n            \" This is particularly noteworthy.\",\n            \" It's worth mentioning that this creates a unique atmosphere.\",\n            \" The implications of this are quite significant.\"\n        ]\n        return text + random.choice(expansions)\n    \n    def _apply_academic_style(self, text: str) -> str:\n        \"\"\"应用学术风格(模拟)\"\"\"\n        replacements = {\n            \"it's\": \"it is\",\n            \"can't\": \"cannot\",\n            \"don't\": \"do not\"\n        }\n        result = text\n        for old, new in replacements.items():\n            result = result.replace(old, new)\n        return result\n    \n    def _apply_casual_style(self, text: str) -> str:\n        \"\"\"应用非正式风格(模拟)\"\"\"\n        return text.replace(\".\", \"!\").replace(\"very\", \"really\")\n```\n\n#### 3.3.2 文档解析服务\n```python\n# services/document_parser.py\nimport io\nfrom typing import BinaryIO\nimport PyPDF2\nfrom docx import Document\nfrom pptx import Presentation\n\nclass DocumentParserService:\n    \"\"\"文档解析服务\"\"\"\n    \n    def parse_pdf(self, file: BinaryIO) -> str:\n        \"\"\"解析 PDF 文件\"\"\"\n        reader = PyPDF2.PdfReader(file)\n        text = \"\"\n        for page in reader.pages:\n            text += page.extract_text() + \"\\n\"\n        return text.strip()\n    \n    def parse_docx(self, file: BinaryIO) -> str:\n        \"\"\"解析 DOCX 文件\"\"\"\n        doc = Document(file)\n        text = \"\\n\".join([para.text for para in doc.paragraphs])\n        return text.strip()\n    \n    def parse_pptx(self, file: BinaryIO) -> str:\n        \"\"\"解析 PPTX 文件\"\"\"\n        prs = Presentation(file)\n        text = \"\"\n        for slide in prs.slides:\n            for shape in slide.shapes:\n                if hasattr(shape, \"text\"):\n                    text += shape.text + \"\\n\"\n        return text.strip()\n    \n    def parse_txt(self, file: BinaryIO) -> str:\n        \"\"\"解析 TXT 文件\"\"\"\n        return file.read().decode('utf-8').strip()\n    \n    def parse(self, file: BinaryIO, filename: str) -> str:\n        \"\"\"根据文件类型解析文档\"\"\"\n        ext = filename.lower().split('.')[-1]\n        \n        if ext == 'pdf':\n            return self.parse_pdf(file)\n        elif ext in ['docx', 'doc']:\n            return self.parse_docx(file)\n        elif ext in ['pptx', 'ppt']:\n            return self.parse_pptx(file)\n        elif ext == 'txt':\n            return self.parse_txt(file)\n        else:\n            raise ValueError(f\"Unsupported file type: {ext}\")\n```\n\n### 3.4 路由层设计\n\n```python\n# api/humanize.py\nfrom fastapi import APIRouter, HTTPException, UploadFile, File\nfrom app.models.schemas import HumanizeRequest, HumanizeResponse\nfrom app.services.text_processor import TextProcessorService\nfrom app.services.document_parser import DocumentParserService\n\nrouter = APIRouter(prefix=\"/api/v1\", tags=[\"humanize\"])\n\ntext_processor = TextProcessorService()\ndocument_parser = DocumentParserService()\n\n@router.post(\"/humanize\", response_model=HumanizeResponse)\nasync def humanize_text(request: HumanizeRequest):\n    \"\"\"\n    人性化处理文本\n    \n    接收文本或文档内容,根据参数进行人性化重写\n    \"\"\"\n    try:\n        result = text_processor.humanize(\n            text=request.source.text,\n            length=request.params.length,\n            similarity=request.params.similarity,\n            style=request.params.style,\n            custom_style=request.params.customStyle\n        )\n        return HumanizeResponse(**result)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@router.post(\"/parse-document\")\nasync def parse_document(file: UploadFile = File(...)):\n    \"\"\"\n    解析文档并提取文本\n    \n    注意: 前端版本中,文档解析在客户端完成\n    此端点为可选的服务器端实现\n    \"\"\"\n    if file.size > 40 * 1024 * 1024:  # 40MB\n        raise HTTPException(status_code=400, detail=\"File too large\")\n    \n    allowed_extensions = ['pdf', 'docx', 'pptx', 'txt']\n    ext = file.filename.split('.')[-1].lower()\n    if ext not in allowed_extensions:\n        raise HTTPException(status_code=400, detail=\"Unsupported file type\")\n    \n    try:\n        content = await file.read()\n        text = document_parser.parse(io.BytesIO(content), file.filename)\n        \n        # 限制长度\n        if len(text) > 5000:\n            text = text[:5000]\n        \n        return {\"text\": text, \"truncated\": len(text) == 5000}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to parse document: {str(e)}\")\n```\n\n### 3.5 应用入口\n\n```python\n# main.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.api import humanize\n\napp = FastAPI(\n    title=\"AI Text Humanizer API\",\n    description=\"将 AI 生成的文本转换为人类风格的内容\",\n    version=\"1.0.0\"\n)\n\n# CORS 配置\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # 前端地址\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# 注册路由\napp.include_router(humanize.router)\n\n@app.get(\"/\")\nasync def root():\n    return {\n        \"message\": \"AI Text Humanizer API\",\n        \"docs\": \"/docs\",\n        \"health\": \"ok\"\n    }\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"healthy\"}\n```\n\n## 4. 数据交互流程\n\n### 4.1 文本处理流程\n\n```\n┌─────────┐\n│  用户   │\n└────┬────┘\n     │ 1. 输入文本 + 选择参数\n     ▼\n┌─────────────────┐\n│  InputSection   │\n└────┬────────────┘\n     │ 2. 表单验证(React Hook Form + Zod)\n     ▼\n┌─────────────────┐\n│  useHumanize    │ (Hook)\n└────┬────────────┘\n     │ 3. 调用 API\n     ▼\n┌─────────────────┐\n│  POST /api/     │\n│    humanize     │ (Next.js API Route - 可选代理)\n└────┬────────────┘\n     │ 4. 转发请求\n     ▼\n┌─────────────────┐\n│  FastAPI        │\n│  /api/v1/       │\n│  humanize       │\n└────┬────────────┘\n     │ 5. 业务处理\n     ▼\n┌─────────────────┐\n│ TextProcessor   │\n│  Service        │\n└────┬────────────┘\n     │ 6. 模拟转换(800-1200ms)\n     ▼\n┌─────────────────┐\n│  返回结果       │\n│  {content,      │\n│   chars}        │\n└────┬────────────┘\n     │ 7. 响应\n     ▼\n┌─────────────────┐\n│  OutputPanel    │ (显示结果)\n└────┬────────────┘\n     │ 8. 保存历史\n     ▼\n┌─────────────────┐\n│  LocalStorage   │\n└─────────────────┘\n```\n\n### 4.2 文档上传流程\n\n```\n┌─────────┐\n│  用户   │\n└────┬────┘\n     │ 1. 上传文档(拖拽/点击)\n     ▼\n┌─────────────────┐\n│ UploadDropzone  │\n└────┬────────────┘\n     │ 2. 验证文件(格式、大小)\n     ▼\n┌─────────────────┐\n│  FileReader API │ (前端解析)\n└────┬────────────┘\n     │ 3. 提取文本\n     ▼\n┌─────────────────┐\n│  检查长度       │\n└────┬────────────┘\n     │ 4a. ≤ 5000 字符\n     │ 4b. > 5000 字符 → 截断 + 提示\n     ▼\n┌─────────────────┐\n│  填充到文本框   │\n└────┬────────────┘\n     │ 5. 后续流程同文本处理\n     ▼\n```\n\n## 5. 状态管理\n\n### 5.1 前端状态\n\n#### 5.1.1 表单状态\n- 由 React Hook Form 管理\n- 实时验证\n- 错误信息显示\n\n#### 5.1.2 UI 状态\n```typescript\ninterface UIState {\n  isLoading: boolean;        // 处理中\n  activeTab: 'text' | 'document';\n  showCustomStyleInput: boolean;\n  isMobileParamDrawerOpen: boolean;\n}\n```\n\n#### 5.1.3 数据状态\n```typescript\ninterface DataState {\n  inputText: string;\n  uploadedFile?: File;\n  outputContent?: string;\n  outputCharCount?: number;\n  history: HistoryItem[];\n}\n```\n\n### 5.2 LocalStorage 数据结构\n\n```typescript\n// Key: \"humanize_history\"\n// Value: HistoryItem[]\n\ninterface HistoryItem {\n  id: string;               // 唯一标识\n  preview: string;          // 前 100 字\n  fullText: string;         // 完整输入文本\n  outputText: string;       // 完整输出文本\n  timestamp: number;        // Unix 时间戳\n  params: {\n    length: string;\n    similarity: string;\n    style: string;\n    customStyle?: string;\n  };\n}\n```\n\n## 6. 错误处理\n\n### 6.1 前端错误处理\n\n#### 6.1.1 表单验证错误\n- 内联错误提示(红色文本)\n- 字段边框变红\n- 禁用提交按钮\n\n#### 6.1.2 API 错误\n- Toast 通知(错误类型 + 消息)\n- 内联错误提示\n- 提供重试选项\n\n#### 6.1.3 文件上传错误\n```typescript\nenum FileUploadError {\n  INVALID_FORMAT = \"不支持的文件格式\",\n  FILE_TOO_LARGE = \"文件大小超过 40MB\",\n  PARSE_FAILED = \"文件解析失败\",\n  EMPTY_CONTENT = \"文件内容为空\"\n}\n```\n\n### 6.2 后端错误处理\n\n#### 6.2.1 HTTP 状态码\n- `400 Bad Request`: 请求参数错误\n- `413 Payload Too Large`: 文件过大\n- `415 Unsupported Media Type`: 文件格式不支持\n- `422 Unprocessable Entity`: 验证失败\n- `500 Internal Server Error`: 服务器错误\n\n#### 6.2.2 错误响应格式\n```json\n{\n  \"detail\": \"错误描述信息\"\n}\n```\n\n## 7. 性能优化\n\n### 7.1 前端优化\n\n#### 7.1.1 代码分割\n- 使用 Next.js 自动代码分割\n- 懒加载非关键组件(历史记录、微调器)\n- 动态导入大型库\n\n#### 7.1.2 资源优化\n- 图片懒加载\n- 字体子集化\n- 压缩静态资源\n\n#### 7.1.3 渲染优化\n- 使用 `React.memo` 防止不必要的重渲染\n- `useMemo` 缓存计算结果\n- `useCallback` 缓存函数引用\n- 虚拟滚动(如历史记录很多时)\n\n#### 7.1.4 网络优化\n- API 请求防抖\n- 取消未完成的请求(用户快速切换)\n- 预加载关键资源\n\n### 7.2 后端优化\n\n#### 7.2.1 响应优化\n- 异步处理\n- 流式响应(大文本)\n- 压缩响应体(gzip)\n\n#### 7.2.2 文档解析优化\n- 限制解析时间(超时机制)\n- 内存管理(大文件流式读取)\n- 缓存解析结果(相同文件)\n\n## 8. 测试策略\n\n### 8.1 前端测试\n\n#### 8.1.1 单元测试\n```typescript\n// tests/unit/schemas.test.ts\ndescribe('humanizeSchema', () => {\n  it('should validate text with 300-5000 chars', () => {\n    const valid = humanizeSchema.safeParse({\n      mode: 'text',\n      text: 'a'.repeat(300),\n      length: 'Normal',\n      similarity: 'Moderate',\n      style: 'Neutral'\n    });\n    expect(valid.success).toBe(true);\n  });\n  \n  it('should reject text < 300 chars', () => {\n    const invalid = humanizeSchema.safeParse({\n      mode: 'text',\n      text: 'short',\n      // ...\n    });\n    expect(invalid.success).toBe(false);\n  });\n});\n```\n\n#### 8.1.2 组件测试\n```typescript\n// tests/unit/UploadDropzone.test.tsx\ndescribe('UploadDropzone', () => {\n  it('should accept valid file formats', async () => {\n    const { getByText } = render(<UploadDropzone {...props} />);\n    const file = new File(['content'], 'test.pdf', { type: 'application/pdf' });\n    \n    const dropzone = getByText(/upload/i);\n    await userEvent.upload(dropzone, file);\n    \n    expect(props.onFileSelect).toHaveBeenCalledWith(file);\n  });\n  \n  it('should reject invalid file formats', async () => {\n    // ...\n  });\n});\n```\n\n#### 8.1.3 集成测试\n```typescript\n// tests/integration/humanize-flow.test.tsx\ndescribe('Humanize Flow', () => {\n  it('should complete full humanize process', async () => {\n    const { getByRole, getByText } = render(<HomePage />);\n    \n    // 输入文本\n    const textarea = getByRole('textbox');\n    await userEvent.type(textarea, 'a'.repeat(300));\n    \n    // 点击提交\n    const button = getByText('Humanize');\n    await userEvent.click(button);\n    \n    // 等待结果\n    await waitFor(() => {\n      expect(getByText(/result/i)).toBeInTheDocument();\n    });\n  });\n});\n```\n\n### 8.2 后端测试\n\n#### 8.2.1 API 测试\n```python\n# tests/test_api.py\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_humanize_success():\n    response = client.post(\"/api/v1/humanize\", json={\n        \"source\": {\n            \"mode\": \"text\",\n            \"text\": \"a\" * 300\n        },\n        \"params\": {\n            \"length\": \"Normal\",\n            \"similarity\": \"Moderate\",\n            \"style\": \"Neutral\"\n        }\n    })\n    assert response.status_code == 200\n    data = response.json()\n    assert \"content\" in data\n    assert \"chars\" in data\n\ndef test_humanize_text_too_short():\n    response = client.post(\"/api/v1/humanize\", json={\n        \"source\": {\n            \"mode\": \"text\",\n            \"text\": \"short\"\n        },\n        # ...\n    })\n    assert response.status_code == 422\n```\n\n#### 8.2.2 服务测试\n```python\n# tests/test_services.py\ndef test_text_processor():\n    processor = TextProcessorService()\n    result = processor.humanize(\n        text=\"a\" * 300,\n        length=\"Normal\",\n        similarity=\"Moderate\",\n        style=\"Neutral\"\n    )\n    assert \"content\" in result\n    assert result[\"chars\"] > 0\n    assert result[\"processingTime\"] >= 800\n```\n\n## 9. 部署架构\n\n### 9.1 开发环境\n```bash\n# 前端\ncd web/frontend\npnpm install\npnpm dev  # http://localhost:3000\n\n# 后端\ncd web/backend\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\nuvicorn app.main:app --reload  # http://localhost:8000\n```\n\n### 9.2 生产环境\n\n#### 9.2.1 前端部署\n- **平台**: Vercel / Netlify\n- **构建命令**: `pnpm build`\n- **输出目录**: `.next`\n- **环境变量**: `NEXT_PUBLIC_API_URL`\n\n#### 9.2.2 后端部署\n- **平台**: Railway / Render / AWS / Docker\n- **启动命令**: `uvicorn app.main:app --host 0.0.0.0 --port 8000`\n- **环境变量**: `CORS_ORIGINS`, `LOG_LEVEL`\n\n### 9.3 Docker 部署(可选)\n\n```dockerfile\n# backend/Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY ./app ./app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NEXT_PUBLIC_API_URL=http://localhost:8000\n    depends_on:\n      - backend\n\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - CORS_ORIGINS=http://localhost:3000\n```\n\n## 10. 安全考虑\n\n### 10.1 前端安全\n- XSS 防护: 使用 React 的自动转义\n- CSRF: Next.js 内置保护\n- 敏感数据: 不在客户端存储敏感信息\n\n### 10.2 后端安全\n- CORS: 限制允许的来源\n- 文件上传: 验证文件类型和大小\n- 输入验证: Pydantic 模型验证\n- 速率限制: 使用 slowapi 或 nginx\n\n### 10.3 数据隐私\n- 用户数据不持久化存储\n- 历史记录仅本地保存\n- 不记录用户输入日志(生产环境)\n\n## 11. 监控与日志\n\n### 11.1 前端监控\n- 错误监控: Sentry\n- 性能监控: Web Vitals\n- 用户行为: Google Analytics (可选)\n\n### 11.2 后端监控\n- 日志: Python logging 模块\n- 性能: FastAPI 中间件记录请求时间\n- 健康检查: `/health` 端点\n\n## 12. 扩展性考虑\n\n### 12.1 未来功能扩展\n- 用户账户系统\n- 批量处理\n- API 密钥管理\n- 更多文件格式支持\n- 实时协作编辑\n- 风格模板保存\n\n### 12.2 AI 模型集成\n当前使用模拟实现,未来可集成:\n- OpenAI GPT-4\n- Anthropic Claude\n- 自训练模型\n- 多模型对比\n\n---\n\n**文档版本**: 1.0  \n**创建日期**: 2025-10-22  \n**最后更新**: 2025-10-22  \n**状态**: 待审核\n\n",
  "fileStats": {
    "size": 37161,
    "lines": 1322,
    "lastModified": "2025-10-22T07:37:15.152Z"
  },
  "comments": []
}