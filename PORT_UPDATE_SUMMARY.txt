===============================================================
        ✅ 前端端口配置已更新
===============================================================

🔄 已更新的文件:

1. lib/api.ts
   旧: const API_BASE_URL = ... || "http://localhost:8000"
   新: const API_BASE_URL = ... || "http://localhost:18201"

2. components/FileUpload.tsx
   旧: fetch("http://localhost:8000/api/v1/upload", ...)
   新: fetch("http://localhost:18201/api/v1/upload", ...)

3. README.md
   - API URL 示例已更新
   - 文档链接已更新

4. .env.example (新创建)
   - 添加了环境变量示例
   - 默认端口: 18201

===============================================================

📋 完整端口配置:

前端端口: 18200
后端端口: 18201

前端访问后端:
  开发环境: http://localhost:18201
  生产环境: https://api.yourdomain.com (需配置)

===============================================================

🔧 环境变量配置:

开发环境 (.env.local):
-----------------------
NEXT_PUBLIC_API_URL=http://localhost:18201

生产环境 (.env.production):
-----------------------
NEXT_PUBLIC_API_URL=https://api.yourdomain.com

如果不设置环境变量,默认使用: http://localhost:18201

===============================================================

🚀 启动流程:

1. 开发环境 (本地):
   -----------------------
   # 不需要额外配置,默认使用 18201
   cd web/frontend
   pnpm dev
   # 前端: http://localhost:18200
   # 访问后端: http://localhost:18201

2. 生产环境 (服务器):
   -----------------------
   # 创建环境变量文件
   cd /root/home/yuyuan/studyx_human/web/frontend
   echo "NEXT_PUBLIC_API_URL=http://localhost:18201" > .env.production
   
   # 或使用域名
   echo "NEXT_PUBLIC_API_URL=https://api.yourdomain.com" > .env.production
   
   # 构建和启动
   pnpm build
   pnpm start

===============================================================

🧪 测试验证:

1. 检查前端是否正确访问后端:
   -----------------------
   # 启动后端
   cd /root/home/yuyuan/studyx_human/web/backend
   source venv/bin/activate
   uvicorn app.main:app --host 0.0.0.0 --port 18201

   # 启动前端
   cd /root/home/yuyuan/studyx_human/web/frontend
   pnpm dev

   # 浏览器访问
   http://localhost:18200
   
   # 检查浏览器控制台 Network 标签
   # API 请求应该是: http://localhost:18201/api/v1/...

2. 测试 API 调用:
   -----------------------
   # 在浏览器控制台输入
   fetch('http://localhost:18201/health')
     .then(r => r.json())
     .then(console.log)
   
   # 应该返回: {"status":"healthy","version":"1.0.0"}

===============================================================

📊 Next.js 配置说明:

next.config.js 中的 rewrites:
-----------------------
开发环境会自动代理 /api/* 请求到后端:
  /api/v1/humanize → http://localhost:18201/api/v1/humanize

生产环境不使用代理,直接访问 NEXT_PUBLIC_API_URL

===============================================================

⚠️  重要提醒:

1. 环境变量优先级:
   -----------------------
   .env.production (生产环境)
   .env.local (本地开发)
   代码默认值 (http://localhost:18201)

2. 构建时注意:
   -----------------------
   环境变量在构建时被注入到代码中,修改后需要重新构建:
   pnpm build

3. 服务器部署:
   -----------------------
   确保后端在 18201 端口运行
   前端通过环境变量或默认值访问后端

===============================================================

🔍 检查配置:

查看当前 API URL:
-----------------------
# 在浏览器控制台
console.log(process.env.NEXT_PUBLIC_API_URL)

或在代码中:
-----------------------
// lib/api.ts
console.log('API_BASE_URL:', API_BASE_URL);

===============================================================

📚 相关文档:

- 前端部署: SIMPLE_FRONTEND_DEPLOY.md
- 快速参考: FRONTEND_QUICK_REFERENCE.txt
- 完整指南: DEPLOY_TO_LINUX.md
- 端口配置: PORT_CHANGES_SUMMARY.txt

===============================================================

✅ 更新完成!

前端现在会访问后端的 18201 端口:
  http://localhost:18201 (开发/测试)
  https://api.yourdomain.com (生产)

===============================================================
